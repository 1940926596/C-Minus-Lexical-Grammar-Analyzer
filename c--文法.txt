1.program -> declaration_list

//此处为文法左递归文法
2.declaration_list -> declaration_list declaration | declaration
declaration_list -> declaration declaration_list | empty

3.declaration -> var_declaration  | fun_declaration
4.var-declaration → type-specifier ID | type-specifier ID[NUM];
5.type-specifier → int | void
6.fun-declaration → type-specifier ID(params) compound-stmt
7.params → param-list | void

//此处文法为左递归文法
8.param-list → param-list , param | param
param-list -> param param-list'
param-list'-> , param param-list' | empty

9.param → type-specifier ID |type-specifier ID[]
10.compound-stmt → { local-declarations statement-list }

//此处文法为左递归文法
11.local-declarations → var-declaration local-declarations| empty
local-declarations → var-declaration local-declarations| empty


//此处文法为左递归文法
12.statement-list → statement statement-list | empty
statement-list → statement statement-list | empty

13.statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
14.expression-stmt → expression; | ；
15.selection-stmt → if (expression) statement | if (expression) statement else statement
16.iteration-stmt → while (expression) statement
17.return-stmt → return; | return expression;
18.expression → var=expression | simple-expression
19.var→ ID | ID[expression]
20.simple-expression → additive-expression relop additive-expression |additive-expression
21.relop →  <= | < | > | >= | == | !=

//此处文法为左递归文法
22.additive-expression → additive-expression addop term | term
additive-expression -> term additive-expression'
additive-expression' -> addop term additive-expression' | empty

23.addop → + | -

//此处文法为左递归文法
24.term → term mulop factor | factor
term -> factor term'
term'-> mulop factor term' | empty

25.mulop → * | /
26.factor → (expression) | var | call | NUM
27.call → ID(args)
28.args → arg-list | empty

//此处文法为左递归文法
29.arg-list → arg-list,expression | expression
arg-list -> expression arg-list'
arg-list' -> ,expression arg-list' | empty



